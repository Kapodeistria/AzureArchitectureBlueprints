#!/bin/bash
set -e

echo "ðŸš€ Creating Azure AI Foundry Flows"
echo "=================================="

# Load environment variables
if [ -f .env.local ]; then
    export $(grep -v '^#' .env.local | xargs)
fi

# Extract your actual configuration
PROJECT_NAME=$(echo $PROJECT_ENDPOINT | sed 's/.*projects\///g')
RESOURCE_GROUP=$(az group list --query "[?contains(name, 'kapodeistria')].name" -o tsv | head -1)

echo "ðŸ“‹ Configuration:"
echo "  Project: $PROJECT_NAME"
echo "  Resource Group: $RESOURCE_GROUP"
echo "  Model: $MODEL_DEPLOYMENT_NAME"
echo ""

# Create main workflow
mkdir -p flows/interview-workflow

cat > flows/interview-workflow/flow.dag.yaml << EOF
inputs:
  case_study:
    type: string
    description: The case study text to analyze
outputs:
  final_analysis:
    type: string
    reference: \${synthesis.output}

nodes:
- name: requirements_analysis
  type: llm
  source:
    type: code
    path: requirements_prompt.jinja2
  inputs:
    deployment_name: ${MODEL_DEPLOYMENT_NAME}
    temperature: 0.1
    max_tokens: 1500
    case_study: \${inputs.case_study}
  connection: azureml:Default_AzureOpenAI
  api: chat

- name: architecture_design
  type: llm
  source:
    type: code
    path: architecture_prompt.jinja2
  inputs:
    deployment_name: ${MODEL_DEPLOYMENT_NAME}
    temperature: 0.4
    max_tokens: 3000
    case_study: \${inputs.case_study}
    requirements: \${requirements_analysis.output}
  connection: azureml:Default_AzureOpenAI
  api: chat

- name: synthesis
  type: python
  source:
    type: code
    path: synthesis.py
  inputs:
    case_study: \${inputs.case_study}
    requirements: \${requirements_analysis.output}
    architecture: \${architecture_design.output}
EOF

# Create prompts
cat > flows/interview-workflow/requirements_prompt.jinja2 << 'EOF'
system:
You are a Requirements Analyst Agent specialized in extracting and categorizing requirements from case studies.

Return your response in this exact format:

FUNCTIONAL REQUIREMENTS:
- [requirement 1]
- [requirement 2]
...

NON-FUNCTIONAL REQUIREMENTS:
- [requirement 1] 
- [requirement 2]
...

CONSTRAINTS:
- [constraint 1]
- [constraint 2]
...

user:
{{case_study}}
EOF

cat > flows/interview-workflow/architecture_prompt.jinja2 << 'EOF'
system:
You are a Senior Azure Solution Architect with deep expertise in enterprise cloud architecture.

Design 3 comprehensive Azure architecture solutions:
- COST-OPTIMIZED: Minimize monthly spend while meeting requirements
- PERFORMANCE-OPTIMIZED: Maximum scalability and performance  
- SECURITY-HARDENED: Enterprise security and compliance focus

For each solution provide:
- Specific Azure services with SKU recommendations
- Architecture patterns and design decisions
- Estimated monthly costs (realistic pricing)
- Pros and cons with business impact

user:
Case Study: {{case_study}}

Requirements: {{requirements}}
EOF

cat > flows/interview-workflow/synthesis.py << 'EOF'
from promptflow import tool

@tool
def synthesize_analysis(case_study: str, requirements: str, architecture: str) -> str:
    """Synthesize all analysis results into final report"""
    
    report = f"""# Architecture Solution Analysis

## Case Study
{case_study}

## Requirements Analysis
{requirements}

## Architecture Design
{architecture}

## Summary
This analysis provides a comprehensive Azure solution for the given case study.

---
*Generated by Azure AI Foundry Interview Assistant*
"""
    
    return report
EOF

echo "âœ… Flow created successfully!"
echo ""
echo "ðŸš€ Deploy to your Azure AI Foundry:"
echo "  cd flows/interview-workflow"
echo "  az ml flow create --file flow.dag.yaml --resource-group $RESOURCE_GROUP"
echo ""
echo "ðŸ§ª Test the workflow:"
echo "  az ml flow test --file flow.dag.yaml --inputs case_study='FinanceFlow payment processor needs AI platform...'"