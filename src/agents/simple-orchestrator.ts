/**
 * Simple Orchestrator Agent
 * Direct coordination without complex task queues - focuses on working analysis
 */

import OpenAI from 'openai';
import config from '../config/config.js';
import { RequirementsAnalystAgent } from './requirements-analyst-agent.js';
import { ArchitectureAgent } from './architecture-agent.js';
import { VisualArchitectureAgent } from './visual-architecture-agent.js';
import { CostOptimizerAgent } from './cost-optimizer-agent.js';
import { RiskAssessorAgent } from './risk-assessor-agent.js';
import { DocumentationAgent } from './documentation-agent.js';
import { ResearchOrchestratorAgent } from './research-orchestrator-agent.js';
import { WellArchitectedOrchestrator } from './well-architected-orchestrator.js';
import { ArchitectureRefinementOrchestrator } from './architecture-refinement-orchestrator.js';
import { getAgentRegistry, isAgentDeployed } from '../utils/deploy-agents-to-foundry.js';
import { promises as fs } from 'fs';
import path from 'path';
// Phase 2: DSL functionality will be separate
// import { StructurizrDSLValidatorAgent } from './structurizr-dsl-validator-agent.js';
// import { SolutionArchitectReviewerAgent } from './solution-architect-reviewer-agent.js';

export class SimpleOrchestrator {
  private client: OpenAI;
  private agentRegistry: { [key: string]: string } = {};
  
  constructor(client: OpenAI) {
    this.client = client;
  }

  /**
   * Initialize agent registry for local execution
   */
  private initializeAgentRegistry(): void {
    try {
      this.agentRegistry = getAgentRegistry();
      const deployedAgents = Object.keys(this.agentRegistry);
      if (deployedAgents.length > 0) {
        console.log(`üîó Using deployed agents: ${deployedAgents.join(', ')}`);
      } else {
        console.log('‚ö†Ô∏è  No deployed agents found in registry - using local execution only');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  Could not load agent registry - using local execution only');
      this.agentRegistry = {};
    }
  }

  async coordinate(caseStudyText: string, caseStudyFolder?: string): Promise<string> {
    try {
      console.log('üöÄ Starting WAF-compliant architecture analysis\n');

      // Initialize agent registry
      this.initializeAgentRegistry();

      // Initialize agents
      const researchAgent = new ResearchOrchestratorAgent(this.client);
      const visualAgent = new VisualArchitectureAgent(this.client);
      const wafOrchestrator = new WellArchitectedOrchestrator(this.client);

      // Step 0: Research Intelligence (6 parallel agents)
      console.log('üîç Research Intelligence');
      let researchResults = [];
      let researchReport = '';
      try {
        const timeoutPromise = new Promise((_, reject) =>
          setTimeout(() => reject(new Error('Research intelligence timeout')), 120000)
        );

        researchResults = await Promise.race([
          researchAgent.executeResearch(caseStudyText),
          timeoutPromise
        ]) as any[];

        researchReport = researchAgent.generateResearchReport(researchResults);
        const successful = researchResults.filter(r => r.status === 'completed').length;
        console.log(`   ‚úì ${successful}/${researchResults.length} agents completed\n`);

      } catch (error) {
        console.log(`   ‚ö† Using fallback (${error.message})\n`);
        researchReport = `# Research Intelligence (Fallback)\n\nProceeding with standard analysis workflow.`;
      }

      await this.saveIntermediateResults('Research Intelligence', researchReport, caseStudyFolder);

      // Step 1: Requirements Analysis
      console.log('üìã Requirements Analysis');
      let requirements = '';
      try {
        requirements = await Promise.race([
          this.analyzeRequirements(caseStudyText, researchReport),
          new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 30000))
        ]) as string;
        console.log('   ‚úì Complete\n');
      } catch (error) {
        console.log('   ‚ö† Using fallback\n');
        requirements = `# Requirements Analysis (Fallback)\n\n## Functional Requirements\n- Core functionality\n- Authentication\n- Data processing\n\n## Non-Functional Requirements\n- High availability\n- Performance & scalability\n- Security & compliance`;
      }

      await this.saveIntermediateResults('Requirements Analysis', requirements, caseStudyFolder);

      // Step 2: Architecture Design
      console.log('üèóÔ∏è  Architecture Design');
      let architecture = '';
      try {
        architecture = await Promise.race([
          this.designArchitecture(caseStudyText, requirements, researchReport),
          new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 30000))
        ]) as string;
        console.log('   ‚úì Complete\n');
      } catch (error) {
        console.log('   ‚ö† Using fallback\n');
        architecture = `# Azure Architecture\n\n## Core Components\n- Azure App Service\n- Azure SQL Database\n- Azure Application Gateway\n- Azure Key Vault\n- Azure Monitor`;
      }

      await this.saveIntermediateResults('Architecture Design', architecture, caseStudyFolder);

      // Step 2.1: Architecture Refinement
      console.log('üîÑ Architecture Optimization');
      let refinedArchitecture = architecture;
      try {
        const refinementOrchestrator = new ArchitectureRefinementOrchestrator(this.client);

        const refinementTask = {
          id: 'architecture-optimization',
          type: 'architecture-refinement' as const,
          priority: 'high' as const,
          payload: {
            caseStudy: caseStudyText,
            requirements,
            businessContext: caseStudyText,
            targetWAFScore: 85,
            maxIterations: 3,
            caseStudyFolder
          }
        };

        const refinementResult = await refinementOrchestrator.execute(refinementTask);
        refinedArchitecture = refinementResult.finalArchitecture;
        architecture = refinedArchitecture;

        console.log(`   ‚úì WAF Score: ${refinementResult.finalWAFScore}/100 (${refinementResult.totalIterations} iterations)\n`);

        await this.saveIntermediateResults('Optimized Architecture', refinedArchitecture, caseStudyFolder);

      } catch (error) {
        console.log('   ‚ö† Using initial design\n');
      }

      // Step 2.5: Visual Diagrams
      console.log('üé® Architecture Diagrams');
      let visualDiagrams = '';
      try {
        visualDiagrams = await Promise.race([
          visualAgent.generateDetailedDiagram(architecture, caseStudyText, caseStudyFolder),
          new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 30000))
        ]) as string;
        console.log('   ‚úì Complete\n');
      } catch (error) {
        console.log('   ‚ö† Using fallback\n');
        visualDiagrams = `[Visual diagrams unavailable]\n\n${architecture}`;
      }

      await this.saveIntermediateResults('Visual Architecture Diagrams', visualDiagrams, caseStudyFolder);

      // Step 4: Well-Architected Framework Assessment
      console.log('üèóÔ∏è  WAF Assessment');
      let wafAssessment;
      try {
        const wafTask = {
          id: 'waf-assessment',
          type: 'waf-comprehensive-assessment' as const,
          priority: 'high' as const,
          payload: {
            architecture,
            requirements,
            businessContext: caseStudyText,
            caseStudyFolder
          }
        };

        wafAssessment = await Promise.race([
          wafOrchestrator.executeWAFAssessment(wafTask),
          new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 180000))
        ]);

        console.log(`   ‚úì Score: ${wafAssessment.overallScore}/100\n`);

      } catch (error) {
        console.log('   ‚ö† Using fallback\n');
        wafAssessment = {
          overallScore: 70.0,
          assessmentSummary: 'Assessment unavailable',
          wafReport: 'WAF assessment in final report'
        };
      }
      await this.saveIntermediateResults('Well-Architected Framework Assessment', wafAssessment.wafReport || wafAssessment.assessmentSummary, caseStudyFolder);

      // Step 5: Parallel Analysis with individual timeouts
      console.log('‚ö° Cost, Risk & Change Analysis');
      let costs, risks, changeManagement;

      try {
        const timeout = (ms: number) => new Promise((_, reject) =>
          setTimeout(() => reject(new Error('timeout')), ms)
        );

        [costs, risks, changeManagement] = await Promise.all([
          Promise.race([this.analyzeCosts(architecture), timeout(30000)])
            .catch(err => {
              console.log('   ‚ö† Cost analysis timeout');
              return '# Cost Analysis\n\n*Analysis unavailable - timeout exceeded*';
            }),
          Promise.race([this.assessRisks(architecture), timeout(30000)])
            .catch(err => {
              console.log('   ‚ö† Risk assessment timeout');
              return '# Risk Assessment\n\n*Assessment unavailable - timeout exceeded*';
            }),
          Promise.race([this.developChangeStrategy(caseStudyText, architecture), timeout(30000)])
            .catch(err => {
              console.log('   ‚ö† Change strategy timeout');
              return '# Change Management\n\n*Strategy unavailable - timeout exceeded*';
            })
        ]) as [string, string, string];

        console.log('   ‚úì Complete\n');
      } catch (error) {
        console.log('   ‚úó Failed\n');
        costs = `# Cost Analysis\n\n*Unavailable*`;
        risks = `# Risk Assessment\n\n*Unavailable*`;
        changeManagement = `# Change Management\n\n*Unavailable*`;
      }

      await this.saveIntermediateResults('Cost Analysis', costs, caseStudyFolder);
      await this.saveIntermediateResults('Risk Assessment', risks, caseStudyFolder);
      await this.saveIntermediateResults('Change Management Strategy', changeManagement, caseStudyFolder);

      // Step 6: Generate Documentation
      console.log('üìù Documentation');
      let report;
      try {
        report = await Promise.race([
          this.generateReport(caseStudyText, {
            researchReport,
            requirements,
            architecture,
            visualDiagrams,
            wafAssessment,
            costs,
            risks,
            changeManagement
          }),
          new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 30000))
        ]);
        console.log('   ‚úì Complete\n');
      } catch (error) {
        console.log('   ‚ö† Using fallback\n');
        report = `# Azure Architecture Analysis\n\n${caseStudyText}\n\n## Requirements\n${requirements}\n\n## Architecture\n${architecture}\n\n## Diagrams\n${visualDiagrams}\n\n## Cost\n${costs}\n\n## Risk\n${risks}\n\n## Change\n${changeManagement}`;
      }

      console.log('‚úÖ Analysis complete\n');
      return report;
      
    } catch (error) {
      console.error('‚ùå Orchestration failed:', error);
      return `Analysis failed: ${error instanceof Error ? error.message : String(error)}`;
    }
  }

  private async analyzeRequirements(caseStudyText: string, researchContext?: string): Promise<string> {
    const response = await this.client.chat.completions.create({
      model: config.getAzureConfig().foundry.modelDeploymentName,
      messages: [
        {
          role: 'system',
          content: `You are a Requirements Analyst Agent specializing in Microsoft solution engineer interviews.

CRITICAL FOCUS AREAS:
1. **Use Case Prioritization**: Rank AI capabilities by business impact and implementation ease
2. **Quick Wins vs Long-term**: Separate 8-week POC requirements from 6-month full rollout
3. **Change Management Requirements**: Address doctor resistance and adoption challenges
4. **Stakeholder-Specific Needs**: Different requirements for CTO vs CEO vs Radiologists

ANALYSIS STRUCTURE:
- Immediate Requirements (8-week POC)
- Long-term Requirements (6-month rollout)
- Use Case Priority Matrix (High Impact/Low Effort first)
- Change Management Requirements
- Stakeholder-Specific Requirements

Focus on actionable requirements that directly address the case study questions.`
        },
        {
          role: 'user',
          content: `Analyze requirements with use case prioritization for:\n\n${caseStudyText}${researchContext ? `\n\nRESEARCH INTELLIGENCE CONTEXT:\n${researchContext}` : ''}`
        }
      ],
      max_tokens: 1200,
      temperature: 0.1
    });

    return response.choices[0]?.message?.content || 'Requirements analysis failed';
  }

  private async designArchitecture(caseStudyText: string, requirements: string, researchContext?: string): Promise<string> {
    const response = await this.client.chat.completions.create({
      model: config.getAzureConfig().foundry.modelDeploymentName,
      messages: [
        {
          role: 'system',
          content: `You are an Azure Architecture Agent specializing in AI solutions and hybrid architectures with expert visual diagram creation.

CRITICAL DELIVERABLES:
1. **Specific Azure AI Services with SKUs**: Name exact services with pricing (e.g., "Azure Computer Vision Custom Model - $1.50 per 1K images", "Azure ML Standard DS3_v2 - $196/month")
2. **First Implementation Strategy**: Which AI capability to implement first with technical justification
3. **Hybrid Architecture Details**: Exact data flow with bandwidth and latency specifications
4. **DICOM Integration**: Specific integration patterns with PACS systems and APIs
5. **Change Management Architecture**: UI/UX that builds doctor trust with wireframes/mockups

VISUAL REQUIREMENTS - MANDATORY:
You MUST create detailed ASCII architecture diagrams showing:
- All Azure services with specific SKUs and monthly costs
- Data flow directions (‚óÑ‚îÄ‚îÄ‚ñ∫, ‚îÄ‚îÄ‚ñ∫, ‚óÑ‚îÄ‚îÄ)
- Security boundaries [‚ïê‚ïê‚ïê‚ïê]
- External connections [‚óã]
- On-premises vs cloud components clearly separated
- PACS integration points
- Monitoring and logging flows

ARCHITECTURE STRUCTURE:
- **DETAILED ASCII ARCHITECTURE DIAGRAM** (mandatory for each solution)
- First Use Case Architecture (8-week POC) 
- Full Solution Architecture (3 alternatives)
- Azure Service Specifications (exact SKUs and costs)
- Data Flow Description matching diagrams
- Integration Patterns
- Explainable AI Implementation

Focus on comprehensive visual diagrams with practical, interview-ready architecture details.`
        },
        {
          role: 'user',
          content: `Design specific Azure architecture with AI service selection:\n\nCase Study:\n${caseStudyText}\n\nRequirements:\n${requirements}${researchContext ? `\n\nRESEARCH INTELLIGENCE CONTEXT:\n${researchContext}` : ''}`
        }
      ],
      max_tokens: 3500,
      temperature: 0.2
    });

    return response.choices[0]?.message?.content || 'Architecture design failed';
  }

  private async analyzeCosts(architecture: string): Promise<string> {
    const response = await this.client.chat.completions.create({
      model: config.getAzureConfig().foundry.modelDeploymentName,
      messages: [
        {
          role: 'system',
          content: `You are an Azure Cost Optimization specialist.

Provide concise cost analysis:
1. Monthly/annual cost estimates for each major service
2. Reserved instance savings opportunities (up to 72%)
3. 3-year TCO projection
4. ROI based on business value
5. Quick wins for cost reduction

Format: Service name, SKU, monthly cost, optimization tip.`
        },
        {
          role: 'user',
          content: `Analyze costs:\n\n${architecture}`
        }
      ],
      max_tokens: 800,
      temperature: 0.1
    });

    return response.choices[0]?.message?.content || 'Cost analysis failed';
  }

  private async assessRisks(architecture: string): Promise<string> {
    const response = await this.client.chat.completions.create({
      model: config.getAzureConfig().foundry.modelDeploymentName,
      messages: [
        {
          role: 'system',
          content: `You are a Risk Assessment specialist for Azure solutions.

Identify top 5 risks:
1. Technical risks (scalability, performance)
2. Security vulnerabilities
3. Operational challenges
4. Compliance gaps
5. Business continuity risks

Format: Risk name, Impact (H/M/L), Probability (H/M/L), Mitigation.`
        },
        {
          role: 'user',
          content: `Assess risks:\n\n${architecture}`
        }
      ],
      max_tokens: 600,
      temperature: 0.1
    });

    return response.choices[0]?.message?.content || 'Risk assessment failed';
  }

  private async developChangeStrategy(caseStudyText: string, architecture: string): Promise<string> {
    const response = await this.client.chat.completions.create({
      model: config.getAzureConfig().foundry.modelDeploymentName,
      messages: [
        {
          role: 'system',
          content: `You are a Change Management specialist for cloud migrations.

Provide concise strategy:
1. Stakeholder analysis (identify key groups)
2. Communication plan (addressing concerns)
3. Training approach (by role)
4. Phased rollout (pilot ‚Üí production)
5. Success metrics (adoption KPIs)

Keep it practical and actionable.`
        },
        {
          role: 'user',
          content: `Change strategy for:\n\n${caseStudyText.slice(0, 500)}\n\nArchitecture: ${architecture.slice(0, 300)}`
        }
      ],
      max_tokens: 600,
      temperature: 0.1
    });

    return response.choices[0]?.message?.content || 'Change management strategy failed';
  }

  private async generateReport(caseStudyText: string, analysis: any): Promise<string> {
    const response = await this.client.chat.completions.create({
      model: config.getAzureConfig().foundry.modelDeploymentName,
      messages: [
        {
          role: 'system',
          content: `You are a Documentation Agent specializing in Microsoft Solution Engineer interview presentations with expert visual presentation skills.

CRITICAL STRUCTURE - Match Case Study Questions:
1. **First Use Case Recommendation**: Clear answer to "which AI capability first for maximum impact?"
2. **Azure AI Services Selection**: Specific services mapped to use cases
3. **Hybrid Architecture Approach**: Detailed data residency solution with VISUAL DIAGRAMS
4. **Well-Architected Framework Assessment**: Include WAF pillar scores and compliance analysis
5. **Change Management Strategy**: Concrete plan for doctor adoption
6. **Value Story**: Separate CTO (technical) vs CEO (business) presentations
7. **Quick Wins vs Long-term Vision**: Clear separation and timeline

VISUAL PRESENTATION REQUIREMENTS:
- MANDATORY: Include ALL provided ASCII architecture diagrams
- Place diagrams prominently in architecture sections
- Reference diagrams when explaining data flows and integration
- Use diagrams to support technical explanations
- Ensure diagrams show specific Azure services and costs

INTERVIEW FORMAT:
- Lead with First Use Case recommendation
- Present 3 architecture alternatives with clear pros/cons
- Include comprehensive ASCII architecture diagrams
- Include Azure Well-Architected Framework assessment with pillar scores
- Include specific Azure service selections with SKUs and costs
- Address all constraint questions directly
- End with compelling value propositions

CONSULTANT STYLE:
- Start with recommendation, then justify
- Use data and metrics heavily
- Address stakeholder concerns explicitly  
- Provide clear next steps
- Leverage visual diagrams for technical credibility

Create a comprehensive report that includes all visual diagrams, Well-Architected Framework assessment, and directly answers all case study questions in interview-ready format.`
        },
        {
          role: 'user',
          content: `Generate comprehensive interview-ready report with MANDATORY visual diagrams and WAF assessment:\n\nCase Study:\n${caseStudyText}\n\nAnalysis Results:\n${JSON.stringify(analysis, null, 2)}\n\nCRITICAL REQUIREMENTS:\n- MUST include ALL ASCII architecture diagrams from visualDiagrams section\n- MUST include Azure Well-Architected Framework assessment with pillar scores\n- MUST show specific Azure SKUs with monthly costs\n- MUST reference diagrams in technical explanations\n- MUST provide WAF-based recommendations and compliance status\n- MUST provide visual-supported talking points\n\nThe success of this report depends on comprehensive visual integration and Well-Architected Framework compliance demonstration.`
        }
      ],
      max_tokens: 4000,
      temperature: 0.2
    });

    return response.choices[0]?.message?.content || 'Report generation failed';
  }

  getMetrics() {
    return {
      tasksCompleted: 5,
      averageResponseTime: 1000,
      errorRate: 0,
      status: 'healthy'
    };
  }

  getHealth() {
    return {
      tasksCompleted: 5,
      averageResponseTime: 1000,
      errorRate: 0,
      status: 'healthy'
    };
  }

  private async generateValidatedDSL(caseStudyText: string, architecture: any, requirements: string, caseStudyFolder?: string): Promise<any> {
    try {
      const dslAgent = new StructurizrDSLValidatorAgent(this.client);
      
      // Extract system name from case study
      const systemNameMatch = caseStudyText.match(/(?:system|platform|application|solution)[\s\w]*:\s*([^\n]+)/i);
      const systemName = systemNameMatch ? systemNameMatch[1].trim() : 'AzureSystem';
      
      // Extract Azure services from architecture
      const azureServices = this.extractAzureServices(architecture);
      
      const dslTask = {
        id: 'dsl-generation',
        type: 'structurizr-dsl',
        priority: 'high' as const,
        payload: {
          architecture: architecture,
          requirements: requirements,
          azureServices: azureServices,
          systemName: systemName,
          maxIterations: 3,
          targetLevel: 'all' as const,
          includeStyles: true,
          caseStudyFolder: caseStudyFolder
        }
      };

      const result = await dslAgent.execute(dslTask);
      return result;
      
    } catch (error) {
      console.error('‚ùå DSL generation failed:', error);
      return {
        success: false,
        error: error.message,
        message: 'DSL generation encountered an error'
      };
    }
  }

  private extractAzureServices(architecture: any): any[] {
    // Extract Azure services from the architecture description
    const services: any[] = [];
    const architectureText = typeof architecture === 'string' ? architecture : JSON.stringify(architecture);
    
    // Common Azure services to look for
    const azureServicePatterns = [
      { name: 'Azure App Service', pattern: /app\s+service|web\s+app/gi },
      { name: 'Azure SQL Database', pattern: /sql\s+database|azure\s+sql/gi },
      { name: 'Azure Cosmos DB', pattern: /cosmos\s+db|document\s+database/gi },
      { name: 'Azure Storage', pattern: /blob\s+storage|azure\s+storage/gi },
      { name: 'Azure Functions', pattern: /azure\s+functions|serverless\s+functions/gi },
      { name: 'Azure Kubernetes Service', pattern: /aks|kubernetes\s+service/gi },
      { name: 'Azure API Management', pattern: /api\s+management|apim/gi },
      { name: 'Azure Key Vault', pattern: /key\s+vault|secret\s+management/gi },
      { name: 'Azure Monitor', pattern: /azure\s+monitor|application\s+insights/gi },
      { name: 'Azure Active Directory', pattern: /azure\s+ad|active\s+directory/gi },
      { name: 'Azure Load Balancer', pattern: /load\s+balancer|application\s+gateway/gi },
      { name: 'Azure Service Bus', pattern: /service\s+bus|message\s+queue/gi }
    ];

    azureServicePatterns.forEach(servicePattern => {
      if (servicePattern.pattern.test(architectureText)) {
        services.push({
          name: servicePattern.name,
          description: `${servicePattern.name} component identified in architecture`
        });
      }
    });

    // If no specific services found, add generic ones
    if (services.length === 0) {
      services.push(
        { name: 'Azure App Service', description: 'Web application hosting platform' },
        { name: 'Azure SQL Database', description: 'Managed relational database service' },
        { name: 'Azure Storage', description: 'Cloud storage solution' }
      );
    }

    return services;
  }

  // Phase 2: DSL validation methods will be moved to separate workflow
  // reviewArchitectureWithDSLValidation() - moved to DSL orchestrator

  // Phase 2: All DSL-related methods moved to separate DSL orchestrator workflow

  /**
   * Save intermediate results with streaming for large content
   */
  private async saveIntermediateResults(
    step: string,
    content: string,
    caseStudyFolder?: string
  ): Promise<void> {
    if (!caseStudyFolder) return;

    try {
      const outputDir = path.join(process.cwd(), 'output', caseStudyFolder);
      await fs.mkdir(outputDir, { recursive: true });

      const timestamp = new Date().toISOString();
      const filename = `${step.toLowerCase().replace(/\s+/g, '-')}-${timestamp.slice(0, 19)}.md`;
      const filepath = path.join(outputDir, filename);

      // Use streaming for large content (>100KB)
      if (content.length > 100000) {
        const { createWriteStream } = await import('fs');
        const stream = createWriteStream(filepath, { encoding: 'utf-8' });

        stream.write(`# ${step}\nGenerated: ${timestamp}\nStatus: Completed\n\n`);

        // Stream content in chunks
        const chunkSize = 50000;
        for (let i = 0; i < content.length; i += chunkSize) {
          stream.write(content.slice(i, i + chunkSize));
        }

        stream.write(`\n\n---\nIntermediate result: ${step}\n`);
        stream.end();

        await new Promise((resolve, reject) => {
          stream.on('finish', resolve);
          stream.on('error', reject);
        });
      } else {
        // Regular write for smaller content
        const formattedContent = `# ${step}\nGenerated: ${timestamp}\nStatus: Completed\n\n${content}\n\n---\nIntermediate result: ${step}\n`;
        await fs.writeFile(filepath, formattedContent, 'utf-8');
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è Failed to save ${step}:`, error.message);
    }
  }
}